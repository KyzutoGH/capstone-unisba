# -*- coding: utf-8 -*-
"""proyek_keberhasilan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yyy2U7__qixEh8ie9XgXxY0TnYrvthXs

# 1. Import Library
"""

import pandas as pd
from google.colab import files
import seaborn as sns
import matplotlib.pyplot as plt
import joblib
import os
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder, LabelEncoder, MinMaxScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error, r2_score, accuracy_score, classification_report, confusion_matrix
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC

!pip install tensorflowjs

import tensorflow as tf
import tensorflowjs as tfjs
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping

"""# 2. Load Dataset"""

uploaded = files.upload() # Upload file data_baru.csv di setiap runtime
df = pd.read_csv('data_baru.csv')
df.head()

"""# 3. Data Preprosesing

## Menilai Dataset
"""

# missing value
df.isnull().sum()

# informasi data
df.info()

# deskripsi data
df.describe()

# duplikasi
df.duplicated().sum()

"""## Cleaning Data

### menghapus kolom tidak penting
"""

drop_colum = ['Unnamed: 0', 'Learning_Disabilities','Extracurricular_Activities']
df.drop(drop_colum, axis=1, inplace=True)
print("kolum berhasil terhapus")

"""### Penanganan Missing value"""

# Mengatasi missing value
df[df.Teacher_Quality.isna()]

print("\nData dengan Teacher_Quality yang kosong:")
df.Teacher_Quality.value_counts()

# mengisi kolom nan dengan medium
df.fillna(value='Medium', inplace=True)

df.isna().sum()

"""### penanganan inacurate value"""

df[df.Exam_Score == df.Exam_Score.max()]

df['Exam_Score'] = df['Exam_Score'].replace(df.Exam_Score.max(), 100)

"""### Merubah type Data kategorical

"""

df['Motivation_Level'] = df['Motivation_Level'].astype('category')
df['Teacher_Quality'] = df['Teacher_Quality'].astype('category')
df['Gender'] = df['Gender'].astype('category')

df.info()

"""# 4. Data preparation

## Melakukan Encoding terhadap kolom kategorikal
"""

labelEncoder = LabelEncoder()
# mendefinisikan kolum
categoricalColumn = ['Motivation_Level','Teacher_Quality','Gender']
# melakukan encoding terhadap colum
for label in categoricalColumn:
  df[label] = labelEncoder.fit_transform(df[label])

"""## Menambahkan kolom success_value sebagai target"""

# menetapkan bobot masing-masing kolom
feature_weight ={
    'Hours_Studied' : 3,
    'Attendance' : 1.5,
    'Sleep_Hours' :0.6,
    'Previous_Scores' : 1,
    'Motivation_Level' : 0.5,
    'Tutoring_Sessions' :0.8,
    'Teacher_Quality' :0.2,
    'Physical_Activity':0.4,
    'Exam_Score' : 2
}
# Hitung Skor gabungan berdasarkan bobot
df['raw_success_score']= sum(df[column] * weight for column, weight in feature_weight.items())

# normalisasi skor
scaler=MinMaxScaler(feature_range=(1,100))
df['success_value']= scaler.fit_transform(df[['raw_success_score']])
# bulatkan nilai
df['success_value'] = df['success_value'].round().astype(int)
# hapus kolum raw_success_score
df.drop('raw_success_score', axis=1, inplace=True)

# menambah kolum category
def category_sucess(value):
  if value <=40:
    return 'Gagal'
  elif value <=74:
    return 'Cukup'
  else:
    return 'Berhasil'

df['category_success']=df['success_value'].apply(category_sucess)

# melakukan mapping terhadap category_success
label_mapping ={
    'Gagal' : 0,
    'Cukup' : 1,
    'Berhasil' : 2
}
df['category_success']=df['category_success'].map(label_mapping)

df.head()

"""#5. Exploratory Data Analysis

### Melihat Dimensi dan Tipe Data
"""

df.shape

"""### Cek Statistik Umum"""

df.describe()

"""### Cek Nilai Unik dan Tipe Kategorikal"""

# Motivation Level
df['Motivation_Level'].value_counts()

# Gender
gender_count = df['Gender'].value_counts()
gender_count

# Teacher Quality
df['Teacher_Quality'].value_counts()

"""### Cek Korelasi antar Fitur Numerik"""

# Menampilkan korelasi antara fitur numerik
plt.figure(figsize=(12, 8))
correlation_matrix = df.corr(numeric_only=True)
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title("Correlation Matrix of Numeric Features", fontsize=16)
plt.xticks(fontsize=10, rotation=45)
plt.yticks(fontsize=10)
plt.tight_layout()
plt.show()

"""## Identifikasi faktor paling berpengaruh terhadap Nilai Ujian"""

print("\nFaktor paling berpengaruh terhadap success_value:")
correlations = correlation_matrix['success_value'].sort_values(ascending=False)
print(correlations)

"""### Explanatary Data Analisis

#### Distribusi skor ujian
"""

sns.histplot(df['success_value'], bins=20, kde=True)

"""### Distribusi Hours_Studied"""

sns.histplot(df['Hours_Studied'], bins=20, kde=True)

"""#### Distribusi Attedance"""

sns.histplot(df['Attendance'], bins=20, kde=True)

"""#### Boxplot untuk deteksi outlier"""

sns.boxplot(data=df, y='success_value')

"""#### Perbandingan berdasarkan gender"""

plt.figure(figsize=(6,6))
plt.pie(gender_count, labels=gender_count.index, autopct='%1.1f%%')
plt.title('Diagram Lingkaran Gender')
plt.show()

"""##Hubungan antara Jam Belajar dengan Hasil Ujian"""

plt.figure(figsize=(6,4))
# sns.scatterplot(data=df, x='Hours_Studied', y='Exam_Score')
plt.bar(df['Hours_Studied'], df['Exam_Score'])
plt.title('Hubungan antara Jam Belajar dan Nilai Ujian')
plt.xlabel('Hours Studied')
plt.ylabel('Exam Score')
plt.show()

"""##Hubungan antara Kehadiran dengan Nilai Kesuksesan"""

plt.figure(figsize=(10, 6))
sns.regplot(x='Attendance', y='success_value', data=df, scatter_kws={'alpha':0.4}, line_kws={'color':'red'})
plt.title('Hubungan antara Attendance dan Success Value', fontsize=16)
plt.xlabel('Attendance (%)', fontsize=12)
plt.ylabel('Success Value', fontsize=12)
plt.grid(linestyle='--', alpha=0.7)
plt.show()

"""##Hubungan antara nilai sebelumnya dengan Hasil Ujian"""

plt.figure(figsize=(10, 6))
sns.regplot(x='Previous_Scores', y='Exam_Score', data=df, scatter_kws={'alpha':0.4}, line_kws={'color':'red'})
plt.title('Hubungan antara Previous Scores dan Exam Score', fontsize=16)
plt.xlabel('Previous Scores', fontsize=12)
plt.ylabel('Exam Score', fontsize=12)
plt.grid(linestyle='--', alpha=0.7)
plt.show()

"""##Perbandingan nilai ujian berdasarkan level motivasi"""

plt.figure(figsize=(10, 6))
sns.boxplot(x='Motivation_Level', y='Exam_Score', data=df)
plt.title('Perbandingan Exam Score Berdasarkan Motivation Level', fontsize=16)
plt.xlabel('Motivation Level', fontsize=12)
plt.ylabel('Exam Score', fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

"""##Perbandingan nilai kesuksesan berdasarkan kualitas pengajar"""

plt.figure(figsize=(10, 6))
sns.boxplot(x='Teacher_Quality', y='success_value', data=df)
plt.title('Perbandingan Exam Score Berdasarkan Teacher Quality', fontsize=16)
plt.xlabel('Teacher Quality', fontsize=12)
plt.ylabel('Success Value', fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

"""# 6 Splitting Dataset Menjadi Train, Test, Evaluasi"""

# Pisahkan fitur dan target
X = df.drop(columns=['category_success'])
y = df['category_success']
# split pertama untuk training
X_train, X_temp, y_train, y_temp = train_test_split(X,y, test_size=0.3, stratify=y, random_state=42)
# split kedua untuk test dan validation
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, stratify=y_temp, random_state=42)

len(X_train), len(X_val), len(X_test)

"""# 7 Melatih Model dengan Random Forest Clasifikasi"""

# inisiasi model
RF=RandomForestClassifier(random_state=42)
# latih model
RF.fit(X_train, y_train)
# prediksi pada data validasi
y_pred = RF.predict(X_val)

# akurasi performa validasi
print("Akurasi model", accuracy_score(y_val, y_pred))
print("Laporan Klasifikasi")
print( classification_report(y_val, y_pred))

""" ## menambahkan Hyperparameter tunning"""

# Contoh mengurangi overfitting
RF_tuned = RandomForestClassifier(
    n_estimators=12,       # Jumlah pohon
    max_depth=5,           # kedalaman pohon
    min_samples_split=10,   # Minimum sampel untuk split
    min_samples_leaf=5,     # Minimum sampel pada daun
    max_features='sqrt',    # Jumlah fitur yang dipertimbangkan (dulu 'auto')
    random_state=42
)

# Latih model yang sudah di-tune
RF_tuned.fit(X_train, y_train)

# Evaluasi pada data validasi
y_pred_tuned = RF_tuned.predict(X_val)
print("Akurasi model Random Forest yang di-tune:", accuracy_score(y_val, y_pred_tuned))
print("Laporan Klasifikasi Random Forest yang di-tune:")
print(classification_report(y_val, y_pred_tuned))

"""# 8. Menguji model"""

# menguji model random forest
print("Evaluasi Model Random forest pada data uji")
y_pred_test = RF_tuned.predict(X_test)
# akurasi performa pada testing
print("Akurasi model", accuracy_score(y_test, y_pred_test))
print("Laporan Klasifikasi")
print(classification_report(y_test, y_pred_test))

"""# 9. Deserilization (Model Loading)

### Latih model mengunakan keras model
- tfjs hanya dapat bekerja di tensorflow library
- keras model dibangun diatas tensorflow library
- tfjs tidak dapat mengkonversi Random forest model dari Scikit-learn
"""

# definisikan model
model = Sequential([
    Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    Dropout(0.2),
    Dense(32, activation='relu'),
    Dense(3, activation='softmax')
])
# compile model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy']
              )
# Buatkan early stopping
early_stopping = EarlyStopping(monitor='val_accuracy', patience=5, restore_best_weights=True)
# Latih keras model
history = model.fit(X_train, y_train,
                    epochs= 50,
                    batch_size=32,
                    validation_data=(X_val, y_val),
                    callbacks=[early_stopping],
                    verbose=1
                    )
# Evaluasi model testing
loss, accuracy = model.evaluate(X_test, y_test, verbose=0)
print(f"Tes Accuracy: {accuracy: .4f}")
print(f"Tes Loss: {loss: .4f}")

"""### konversi ke tfjs model"""

os.mkdir('tfjs_model')

# directory tfjs disimpan
tfjs_model_dir = 'tfjs_model'
# convert dan simpan model menjadi format Tensoflow.js
tfjs.converters.save_keras_model(model, tfjs_model_dir)

print(f"TensorFlow.js model saved to: {tfjs_model_dir}")

# Specify the file path for the native Keras format
keras_model_path = 'my_model.keras'

# Save the model in the native Keras format
model.save(keras_model_path)

print(f"Model saved successfully in native Keras format to: {keras_model_path}")